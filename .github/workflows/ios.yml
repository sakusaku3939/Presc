name: iOS CI/CD
on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
    types: [ closed ]
jobs:
  build:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: show Xcode version
        run: xcodebuild -version
        
      - name: install flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.2'
          channel: 'stable'
          
      - name: cache flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-
            
      - name: setup env file
        env:
          BASE64_ENV_FILE: ${{ secrets.BASE64_ENV_FILE }}
        run: echo $BASE64_ENV_FILE | base64 --decode > .env
        
      - name: flutter dependencies install
        run: |
          flutter pub get
          cd ios
          pod install --repo-update
          cd ..
        
      - run: flutter test
      
      - name: import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.CERTIFICATES_P12 }}
          p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}
          keychain: build_keychain
          
      - name: import Provisioning Profiles
        env:
          BASE64_PROVISIONING_PROFILE: ${{ secrets.BASE64_PROVISIONING_PROFILE }}
          BASE64_SHARE_EXTENSION_PROVISIONING_PROFILE: ${{ secrets.BASE64_SHARE_EXTENSION_PROVISIONING_PROFILE }}
        run: |
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PP_MAIN_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/main.mobileprovision"
          PP_SHARE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/share.mobileprovision"
          echo -n "$BASE64_PROVISIONING_PROFILE" | base64 --decode > "$PP_MAIN_PATH"
          echo -n "$BASE64_SHARE_EXTENSION_PROVISIONING_PROFILE" | base64 --decode > "$PP_SHARE_PATH"
          MAIN_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$(security cms -D -i "$PP_MAIN_PATH")")
          SHARE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< "$(security cms -D -i "$PP_SHARE_PATH")")
          mv "$PP_MAIN_PATH" "$HOME/Library/MobileDevice/Provisioning Profiles/$MAIN_UUID.mobileprovision"
          mv "$PP_SHARE_PATH" "$HOME/Library/MobileDevice/Provisioning Profiles/$SHARE_UUID.mobileprovision"
          
      - name: import Export Options
        env:
          BASE64_EXPORT_OPTIONS: ${{ secrets.BASE64_EXPORT_OPTIONS }}
        run: echo -n "$BASE64_EXPORT_OPTIONS" | base64 --decode > ExportOptions.plist
        
      - name: Unlock Keychain
        run: |
          security list-keychains -s build_keychain.keychain
          security unlock-keychain -p "${{ secrets.CERTIFICATE_PASSWORD }}" build_keychain.keychain

      - name: Use CI/CD Project Settings
        run: cp -f ios/DeployGate_CICD/project.pbxproj ios/Runner.xcodeproj/project.pbxproj
          
      - name: Build and Sign IPA
        run: |
          flutter build ios --release --no-codesign
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -destination 'generic/platform=iOS' \
            -configuration Release \
            -archivePath build/Runner.xcarchive \
            archive \
            DEVELOPMENT_TEAM=9ADZZX385P
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportPath build/ios/ipa \
            -exportOptionsPlist ExportOptions.plist
      
      - name: distribute iOS app
        env:
          DEPLOYGATE_API_KEY: ${{ secrets.DEPLOYGATE_API_KEY }}
          IOS_DISTRIBUTION_HASH: ${{ secrets.IOS_DISTRIBUTION_HASH }}
          DEPLOYGATE_USER: ${{ secrets.DEPLOYGATE_USER }}
        run: |
          IPA_PATH=$(find build/ios/ipa -name "*.ipa" | head -n 1)
          if [[ -z "$IPA_PATH" ]]; then
            echo "::error::IPA file not found in build/ios/ipa directory."
            exit 1
          fi
          GIT_HASH=$(git rev-parse --short $GITHUB_SHA)
          GIT_BRANCH=${GITHUB_REF##*/}
          curl \
            -H "Authorization: token $DEPLOYGATE_API_KEY" \
            -F "file=@$IPA_PATH" \
            -F "message=git:$GIT_HASH" \
            -F "distribution_name=$GIT_BRANCH" \
            -F "release_note=new ios build" \
            -F "distribution_key=$IOS_DISTRIBUTION_HASH" \
            "https://deploygate.com/api/users/$DEPLOYGATE_USER/apps"
