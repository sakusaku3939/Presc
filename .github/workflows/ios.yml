name: iOS CI/CD

on:
  workflow_dispatch:
  pull_request:
    branches:
      - master
    types: [ closed ]

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Show Xcode version
        run: xcodebuild -version
        
      - name: Install Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.2'
          channel: 'stable'
          
      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-
            
      - name: Setup environment file
        if: env.BASE64_ENV_FILE != ''
        env:
          BASE64_ENV_FILE: ${{ secrets.BASE64_ENV_FILE }}
        run: echo $BASE64_ENV_FILE | base64 --decode > .env
        
      - name: Install Flutter dependencies
        run: flutter pub get
        
      - name: Run Flutter tests
        run: flutter test

      - name: Setup iOS certificates and provisioning profiles
        env:
          CERTIFICATES_P12: ${{ secrets.CERTIFICATES_P12 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          BASE64_PROVISIONING_PROFILE: ${{ secrets.BASE64_PROVISIONING_PROFILE }}
          BASE64_SHARE_EXTENSION_PROVISIONING_PROFILE: ${{ secrets.BASE64_SHARE_EXTENSION_PROVISIONING_PROFILE }}
        run: |
          # Create temporary keychain
          KEYCHAIN_NAME="build.keychain"
          KEYCHAIN_PASSWORD="temp_password"
          
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_NAME"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          security list-keychains -d user -s "$KEYCHAIN_NAME" $(security list-keychains -d user | sed s/\"//g)
          
          # Import certificate
          echo $CERTIFICATES_P12 | base64 --decode > certificate.p12
          security import certificate.p12 -k "$KEYCHAIN_NAME" -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_NAME"
          
          # Install provisioning profiles
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo $BASE64_PROVISIONING_PROFILE | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/app.mobileprovision
          
          if [ ! -z "$BASE64_SHARE_EXTENSION_PROVISIONING_PROFILE" ]; then
            echo $BASE64_SHARE_EXTENSION_PROVISIONING_PROFILE | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/share_extension.mobileprovision
          fi

      - name: Build iOS app
        env:
          BASE64_EXPORT_OPTIONS: ${{ secrets.BASE64_EXPORT_OPTIONS }}
        run: |
          # Create export options plist
          echo "$BASE64_EXPORT_OPTIONS" | base64 --decode > ios/ExportOptions.plist
          
          # Build iOS app
          flutter build ios --release --no-codesign
          
          # Create archive
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release \
            -archivePath build/ios/Runner.xcarchive \
            archive
            
          # Export IPA
          xcodebuild -exportArchive \
            -archivePath build/ios/Runner.xcarchive \
            -exportPath build/ios/ipa \
            -exportOptionsPlist ios/ExportOptions.plist

      - name: Find IPA file
        id: find_ipa
        run: |
          IPA_PATH=$(find build/ios/ipa -name "*.ipa" | head -n 1)
          echo "ipa_path=$IPA_PATH" >> $GITHUB_OUTPUT
          echo "Found IPA at: $IPA_PATH"

      - name: Upload to DeployGate
        env:
          DEPLOYGATE_API_KEY: ${{ secrets.DEPLOYGATE_API_KEY }}
          IOS_DISTRIBUTION_HASH: ${{ secrets.IOS_DISTRIBUTION_HASH }}
          DEPLOYGATE_USER: ${{ secrets.DEPLOYGATE_USER }}
        run: |
          GIT_HASH=$(git rev-parse --short $GITHUB_SHA)
          GIT_BRANCH=${GITHUB_REF##*/}
          IPA_PATH="${{ steps.find_ipa.outputs.ipa_path }}"
          
          curl \
            -H "Authorization: token $DEPLOYGATE_API_KEY" \
            -F "file=@$IPA_PATH" \
            -F "message=git:$GIT_HASH branch:$GIT_BRANCH" \
            -F "distribution_name=$GIT_BRANCH" \
            -F "release_note=Automated build from GitHub Actions - Commit: $GIT_HASH" \
            -F "distribution_key=$IOS_DISTRIBUTION_HASH" \
            "https://deploygate.com/api/users/$DEPLOYGATE_USER/apps"
